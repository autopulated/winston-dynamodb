// Generated by CoffeeScript 1.6.2
(function() {
  var AWS, DynamoDB, datify, hostname, microtime, util, uuidV4, winston, _,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  winston = require("winston");

  util = require("util");

  AWS = require("aws-sdk");

  uuidV4 = require("node-uuid").v4;

  _ = require("lodash");

  hostname = require("os").hostname();

  microtime = require('microtime');

  datify = function(musecs) {
    var date, key, keys, _i, _len;

    date = new Date(musecs / 1000);
    date = {
      year: date.getFullYear(),
      month: date.getMonth() + 1,
      day: date.getDate(),
      hour: date.getHours(),
      minute: date.getMinutes(),
      second: date.getSeconds(),
      musecs: musecs % 1000000
    };
    keys = _.without(Object.keys(date, "year", "month", "day"));
    for (_i = 0, _len = keys.length; _i < _len; _i++) {
      key = keys[_i];
      if (date[key] < 10) {
        date[key] = "0" + date[key];
      }
    }
    while (date.musecs.toString().length < 6) {
      date.musecs = "0" + date.musecs;
    }
    return "" + date.year + "-" + date.month + "-" + date.day + " " + date.hour + ":" + date.minute + ":" + date.second + "." + date.musecs;
  };

  DynamoDB = exports.DynamoDB = function(options) {
    var regions, _ref;

    if (options == null) {
      options = {};
    }
    regions = ["us-east-1", "us-west-1", "us-west-2", "eu-west-1", "ap-northeast-1", "ap-southeast-1", "ap-southeast-2", "sa-east-1"];
    if (options.accessKeyId == null) {
      throw new Error("need accessKeyId");
    }
    if (options.secretAccessKey == null) {
      throw new Error("need secretAccessKey");
    }
    if (options.region == null) {
      throw new Error("need region");
    }
    if (_ref = options.region, __indexOf.call(regions, _ref) < 0) {
      throw new Error("unavailable region given");
    }
    if (options.tableName == null) {
      throw new Error("need tableName");
    }
    AWS.config.update({
      accessKeyId: options.accessKeyId,
      secretAccessKey: options.secretAccessKey,
      region: options.region
    });
    if ('hostname' in options) {
      hostname = options.hostname;
    }
    this.name = "dynamodb";
    this.level = options.level || "info";
    this.db = new AWS.DynamoDB();
    this.region = options.region;
    return this.tableName = options.tableName;
  };

  util.inherits(DynamoDB, winston.Transport);

  DynamoDB.prototype.log = function(level, msg, meta, callback) {
    var params, use_hostname,
      _this = this;

    if ('hostname' in meta) {
      use_hostname = meta.hostname;
    } else {
      use_hostname = hostname;
    }
    params = {
      TableName: this.tableName,
      Item: {
        level: {
          "S": level
        },
        timestamp: {
          "S": datify(microtime.now())
        },
        msg: {
          "S": msg
        },
        hostname: {
          "S": use_hostname
        }
      }
    };
    if (meta != null) {
      params.Item.meta = {
        "S": JSON.stringify(meta)
      };
    }
    this.db.client.putItem(params, function(err, data) {
      if (err) {
        return _this.emit("error", err);
      } else {
        return _this.emit("logged");
      }
    });
    return callback(null, true);
  };

  winston.transports.DynamoDB = DynamoDB;

}).call(this);
